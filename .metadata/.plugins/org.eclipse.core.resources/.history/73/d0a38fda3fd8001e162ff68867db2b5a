;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
            
;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .data                           ; Assemble into data memory.
            .retain                         ; Override ELF conditional linking
            .retainrefs                     ; And retain any sections that have

LENGTH		.set	2*6
MSB			.set 	32768
BITMASK		.set	0xffff

; All Levels must be able to find the # of iterations for this array
;x_array: 	.word 	559, 2063, 7898, 7899, 10044, 1

; This array is more challenging
; Level 2 needs to be able to handle it
; Level 3 must be able to find the # of iterations for this array
x_array: 	.word 	559, 2063, 7894, 7899, 10001, 1
;7894, 10001

k_array: 	.space	LENGTH
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer

;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------

			clr.w	R4

read_array:
			mov.w	x_array(R4), R5
			call	#Collatz
			mov.w	R5, k_array(R4)
			incd.w	R4
			cmp.w	#LENGTH, R4
			jlo		read_array





end:		jmp		end
			nop

;-------------------------------------------------------------------------------
; Subroutine: Collatz
; Input:  unsigned 16-bit number x in R5 -- changes R5
; Output: unsigned 16-bit number k in R5
; 			k is the number of Collatz iterations
; 				x <-- x/2    if x is even
; 				x <-- 3x+1   if x is odd
; 		    performed until x=1
;
; Changes R5 -- all other core registers in R4-R15 unchanged
; Does not access any addressed memory locations
;-------------------------------------------------------------------------------
Collatz:
			push R6
			push R7

			mov.w R5, R7					;R6, R7 serve as 2 word regisgter
			clr.w R5						;R5 is the counter register
			clr.w R6
											;MSW = most significant word
loop:		bit.w #BITMASK, R6				;Checks MSW is nonzero, skips cmp
			jnz skp_cmp
											;R7 = LSW, R6 = MSW
			cmp #1, R7						;Checks LSW == 1 and exits if so
			jz exit_srt
			inc.w R5						;Incrementing counter

			bit.w #1, R7					;Check if R7 is odd
			jnz odd

			bit.w #BITMASK, R6				;Rolls single word val if empty
			jnz one_word

			rra.w R6
			;jnc no_carry
			jnc one_word
			rra.w R7
			bit.w #MSB, R7
			jnz no_carry
			add.w #MSB, R7


;no_carry:

one_word:	rra.w R7
			bit.w #MSB, R7				;Checks if 1 padding bit added
			jz loop
			sub.w #MSB, R7
			jmp loop


odd:		call #x3plus1					;calls 3x+1 subroutine
			jmp loop





skp_cmp:





exit_srt:
			pop R7
			pop R6
			ret

;-------------------------------------------------------------------------------
; Subroutine: x3plus1
; Input:  unsigned 16-bit number x in R7, R6 -- changes R5, R6
; Output: unsigned 16-bit number y in R5=7, R6 -- y = x + x + x + 1
;
; Changes R5 -- all other core registers in R4-R15 unchanged
;-------------------------------------------------------------------------------
x3plus1:
			push R8
			mov.w #3, R8
lp:


			bit.w #BITMASK, R6
			jz empty_MSW

			add.w R8, R8
			add.w R7, R7
			jnc skp_car
			inc.w R8
			jmp no_carry



empty_MSW:
			add.w R7, R7
			jnc no_carry
			add.w #1, R6


no_carry:
			dec.w R8
			tst.w R8
			jnz lp

			inc.w R7
			jnc skp_add
			inc.w R6

skp_add:
			pop R8
			ret

;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack
            
;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
            
